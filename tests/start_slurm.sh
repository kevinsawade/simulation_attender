#!/bin/bash

# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_BOOLEAN([push],[],[Push the containers])
# ARG_OPTIONAL_BOOLEAN([d],[],[Start compose in detached mode])
# ARG_HELP([Use --push to also push the docker images.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_push="off"
_arg_d="off"


print_help()
{
	printf '%s\n' "Use --push to also push the docker images."
	printf 'Usage: %s [--(no-)push] [--(no-)d] [-h|--help]\n' "$0"
	printf '\t%s\n' "--push, --no-push: Push the containers (off by default)"
	printf '\t%s\n' "--d, --no-d: Start compose in detached mode (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-push|--push)
				_arg_push="on"
				test "${1:0:5}" = "--no-" && _arg_push="off"
				;;
			--no-d|--d)
				_arg_d="on"
				test "${1:0:5}" = "--no-" && _arg_d="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])

. sh_libs/liblog.sh

# exit on error
set -e

# check for persistent directories and access rights
SHOULD_EXIT=0
if [ ! -d openldap_data ] ; then
	info "Run this command to make a persistent directory for the openldap server:\n$ mkdir -p openldap_data"
	SHOULD_EXIT=1
fi
if [ ! -d nfs_mount ] ; then
	info "Run this command to make a persistent directory for the home folder in the slurm nodes:\n$ mkdir -p nfs_mount"
	SHOULD_EXIT=1
fi
if [ ! -d work ] ; then
	info "Run this command to make a persistent directory for the home folder in the slurm nodes:\n$ mkdir -p work"
	SHOULD_EXIT=1
fi
openldap_access_rights=$( ls -ald openldap_data | awk '{print $1'} )
certs_access_rights=$( ls -ald certs | awk '{print $1'} )
if [ $openldap_access_rights != drwxrwxrwx ] ; then
	SHOULD_EXIT=1
	error "Until I figure out how to make the openldap container use the files in openldap_data/ without this command, you need to run this as sudo:\n$ sudo chmod -R ugo+rwx openldap_data"
fi
if [ $certs_access_rights != drwxrwxrwx ] ; then
	SHOULD_EXIT=1
	error "Until I figure out how to make the openldap container use the files in certs/ without this command, you need to run this as sudo:\n$ sudo chmod -R ugo+rwx certs"
fi

if [ ! $SHOULD_EXIT -eq 0 ] ; then
	error "Follow the instructions and then start the script again."
	exit
fi

docker build --pull -t kevinsawade/modules-gmx-base:latest -f modules/Dockerfile \
  --build-arg GOSU_VERSION="1.11" \
  --build-arg ENVIRONMENT_MODULES_VERSION="5.2.0" \
  --build-arg GMX_VERSION="2023.1" \
  --build-arg CMAKE_VERSION="3.26.3" .
if [ $_arg_push = "on" ] ; then
  docker push kevinsawade/modules-gmx-base:latest
fi
docker build --pull -t kevinsawade/ldap-client:latest -f ldap_client/Dockerfile .
if [ $_arg_push = "on" ] ; then
  docker push kevinsawade/ldap-client:latest
fi
docker build --pull -t kevinsawade/slurm-base:latest --build-arg SLURM_VERSION="slurm-22-05-8-1" -f slurm_base/Dockerfile .
if [ $_arg_push = "on" ] ; then
  docker push kevinsawade/slurm-base:latest
fi
docker build --pull -t kevinsawade/slurm-db:latest -f slurm_db/Dockerfile .
if [ $_arg_push = "on" ] ; then
  docker push kevinsawade/slurm-db:latest
fi
docker build --pull -t kevinsawade/slurm-master:latest -f slurm_master/Dockerfile .
if [ $_arg_push = "on" ] ; then
  docker push kevinsawade/slurm-master:latest
fi
docker build --pull -t kevinsawade/slurm-node:latest -f slurm_node/Dockerfile .
if [ $_arg_push = "on" ] ; then
  docker push kevinsawade/slurm-node:latest
fi
docker build --pull -t kevinsawade/run-simulation-attender-tests:latest .
if [ $_arg_push = "on" ] ; then
  docker push kevinsawade/run-simulation-attender-tests:latest
fi

# start the swarm
if [ $_arg_d = "on" ] ; then
  docker compose up -d
else
  docker compose up
fi
